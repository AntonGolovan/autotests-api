from datetime import datetime
from enum import Enum
from typing import (
    List,
    Any,
    Dict,
)
from pydantic import BaseModel, Field, ConfigDict


class VersionStateSchema(str, Enum):
    """
    Состояния версии кампании.
    """
    DRAFT = "DRAFT"  # Черновик
    ACTUAL = "ACTUAL"  # Актуальная версия


class CampaignStateSchema(str, Enum):
    """
    Состояния кампании в процессе её жизненного цикла.
    """
    NEW = "NEW"  # Новая кампания
    READY = "READY"  # Готова к запуску
    SEGMENT_CALCULATING = "SEGMENT_CALCULATING"  # Расчёт сегмента
    SEGMENT_FINISHED = "SEGMENT_FINISHED"  # Расчёт сегмента завершён
    SEGMENT_EMPTY = "SEGMENT_EMPTY"  # Пустой сегмент
    SEGMENT_ERROR = "SEGMENT_ERROR"  # Ошибка при расчёте сегмента
    GROUPS_ERROR = "GROUPS_ERROR"  # Ошибка при работе с группами
    VERIFY_ERROR = "VERIFY_ERROR"  # Ошибка верификации
    GROUPS_READY = "GROUPS_READY"  # Группы готовы
    GROUPS_CALCULATING = "GROUPS_CALCULATING"  # Расчёт групп
    GROUPS_FINISHED = "GROUPS_FINISHED"  # Расчёт групп завершён
    VERIFY_PROCESSING = "VERIFY_PROCESSING"  # Процесс верификации
    VERIFY_FINISHED = "VERIFY_FINISHED"  # Верификация завершена
    PENDING = "PENDING"  # В ожидании
    CAMPAIGN_APPROVED = "CAMPAIGN_APPROVED"  # Кампания одобрена
    SCHEDULED = "SCHEDULED"  # Запланирована
    EFFICIENCY_ANALYSIS = "EFFICIENCY_ANALYSIS"  # Анализ эффективности
    SENDING_PROCESSING = "SENDING_PROCESSING"  # Отправка в процессе
    SENDING_FINISHED = "SENDING_FINISHED"  # Отправка завершена
    COMPLETED = "COMPLETED"  # Завершена
    CANCELLED = "CANCELLED"  # Отменена
    STOPPED = "STOPPED"  # Остановлена
    EXPIRED = "EXPIRED"  # Срок действия истёк
    PREPARING_DRAFT = "PREPARING_DRAFT"  # Подготовка черновика
    APPLYING_DRAFT = "APPLYING_DRAFT"  # Применение черновика

class TicketStatusSchema(str, Enum):
    """
    Статусы тикета кампании.
    """
    IN_PROGRESS = "В работе"  # Тикет в работе


class FlowTypeSchema(str, Enum):
    """
    Типы потока выполнения кампании.
    """
    ACRM_FLOW = "ACRM_FLOW"  # Поток ACRM
    EXECUTION_FLOW = "EXECUTION_FLOW"  # Поток выполнения


class CampaignTypeSchema(str, Enum):
    """
    Типы кампаний.
    """
    ONESHOT = "oneshot"  # Разовая кампания
    REGULAR = "regular"  # Регулярная кампания


class FinalApprovementStatusSchema(str, Enum):
    """
    Статусы финального утверждения кампании.
    """
    NOT_APPROVED = "NOT_APPROVED"  # Не утверждена


class AccessesInfoSchema(BaseModel):
    """
    Информация о доступах и разрешениях для кампании.
    """
    online_filters: bool = False  # Онлайн фильтры включены
    autogenerated_online_filters: bool = False  # Автогенерация онлайн фильтров
    active_campaigns_editing: bool = False  # Редактирование активных кампаний


class VersionInfo(BaseModel):
    """
    Информация о версии кампании.
    """
    root_id: int  # ID корневой версии
    version_state: VersionStateSchema  # Состояние версии
    current_draft_id: int  # ID текущего черновика
    archive_versions: List[Any] = []  # Архивные версии


class SystemData(BaseModel):
    """
    Системные данные кампании.
    """
    total_subscribers: int  # Общее количество подписчиков
    is_yt_segment_exists: bool  # Существует ли YT сегмент
    ticket_status: TicketStatusSchema  # Статус тикета
    state: CampaignStateSchema  # Состояние кампании
    can_start_regular_iteration: bool  # Можно ли начать регулярную итерацию
    version_info: VersionInfo  # Информация о версии
    created_at: datetime  # Дата и время создания
    actualizable: bool  # Можно ли актуализировать
    is_groups_updated: bool  # Обновлены ли группы
    final_approvement_status: FinalApprovementStatusSchema  # Статус финального утверждения
    calculations_project: str  # Проект для расчётов
    accesses_info: AccessesInfoSchema  # Информация о доступах


class CreateCampaignResponseSchema(BaseModel):
    """
    Схема ответа при создании кампании.
    """
    name: str = Field(description="Название кампании")
    entity: str  # Тип сущности (например, User)
    trend: str  # Тренд кампании
    discount: bool  # Флаг наличия скидки
    id: int  # Уникальный идентификатор кампании
    specification: str  # Описание кампании
    kind: str  # Тип кампании
    subkind: str  # Подтип кампании
    global_control: bool  # Глобальный контроль
    efficiency: bool  # Флаг эффективности
    comms_auction: bool  # Флаг аукциона коммуникаций
    efficiency_start_time: datetime  # Время начала действия
    efficiency_stop_time: datetime  # Время окончания действия
    with_rotation: bool  # Флаг ротации
    com_politic: bool  # Флаг коммуникационной политики
    soft_com_politic: bool  # Флаг мягкой коммуникационной политики
    campaign_type: CampaignTypeSchema  # Тип кампании (разовая/регулярная)
    expired_at: datetime  # Время истечения
    created_at: datetime  # Время создания
    salt: str  # Соль для уникальности
    target_metrics: List[Any] = []  # Целевые метрики
    qs_schema_version: str  # Версия схемы QS
    motivation_methods: List[Any] = []  # Методы мотивации
    version_info: VersionInfo  # Информация о версии
    emergency_sending: bool  # Флаг экстренной отправки
    state: CampaignStateSchema  # Состояние кампании
    owner: str  # Владелец кампании
    ticket: str  # Номер тикета
    ticket_status: TicketStatusSchema  # Статус тикета
    system_data: SystemData  # Системные данные
    planned_channels: List[str]  # Планируемые каналы коммуникации
    flow_type: FlowTypeSchema  # Тип потока
    priority_info: Dict[str, Any] = {}  # Информация о приоритете
    is_testing: bool  # Флаг тестовой кампании

class UpdateCampaignRequestSchema(BaseModel):
    """
    Схема запроса на обновление кампании.
    В текущей версии не содержит полей.
    """
    pass

class UpdateCampaignResponseSchema(BaseModel):
    """
    Схема ответа на обновление кампании.
    В текущей версии не содержит полей.
    """
    pass

class CreateCampaignRequestSchema(BaseModel):
    """
    Схема запроса на создание кампании.
    """
    campaign_type: str = Field(default="oneshot", description="Тип кампании (oneshot/regular)")
    discount: bool = Field(default=False, description="Флаг наличия скидки")
    emergency_sending: bool = Field(default=False, description="Флаг экстренной отправки")
    entity: str = Field(default="User", description="Тип сущности")
    soft_com_politic: bool = Field(default=False, description="Флаг мягкой коммуникационной политики")
    com_politic: bool = Field(default=False, description="Флаг коммуникационной политики")
    planned_channels: List[str]  # Планируемые каналы коммуникации
    efficiency: bool = Field(default=False, description="Флаг эффективности")
    trend: str = Field(default="taxi_rf_and_cis", description="Тренд кампании")
    with_rotation: bool = Field(default=False, description="Флаг ротации")
    qs_schema_version: str = Field(default="1", description="Версия схемы QS")
    name: str = Field(description="Название кампании")
    specification: str = Field(description="Описание кампании")
    kind: str = Field(default="taxi_rf_and_cis_tariff", description="Тип кампании")
    subkind: str = Field(default="taxi_rf_and_cis_tariff_vmeste", description="Подтип кампании")
    efficiency_start_time: datetime = Field(description="Время начала действия кампании")
    efficiency_stop_time: datetime = Field(description="Время окончания действия кампании")